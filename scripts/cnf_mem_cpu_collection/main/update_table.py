"""
    update_table.py
    Goal:
        organize data gathered and calculated in data_collection.py and data_comparison.py into a table (csv file)
        Table's general layout:
            ----------------------------------------------------------------------------------------------
            | NameSpace | Pod | Test 1's name and time | Test 2's name and time |         delta         |
            ----------------------------------------------------------------------------------------------
            |          |     |    Memory   |    CPU    |    Memory    |    CPU   |   Memory   |    CPU   |
            ----------------------------------------------------------------------------------------------
            |          |     |  Ave | Max  | Ave | Max |  Ave | Max  | Ave | Max | Ave | Max | Ave | Max |
            ----------------------------------------------------------------------------------------------
"""


import pandas as pd


# generate a dictionary that combines all dictionary/data
def create_df(content_dict, mem_dict_avg, mem_dict_max, cpu_dict_avg, cpu_dict_max, time):
    new_dict = {}
    col_label = ["NameSpace", "Pod",
                 "Delta(AvgMemory)", "Delta(MaxMemory)",
                 "Delta(AvgCPU)", "Delta(MaxCPU)",
                 f"MemoryAvg({time[0]}-{time[1]}|{time[2]}s)",
                 f"MemoryMax({time[0]}-{time[1]}|{time[2]}s)",
                 f"CPUAvg({time[0]}-{time[1]}|{time[2]}s)",
                 f"CPUMax({time[0]}-{time[1]}|{time[2]}s)"]
    for k in content_dict:
        content = content_dict[k]
        try:
            # handle null results
            if len(content) < 3:
                new_dict[content_dict[k][0], content_dict[k][1]] = [content_dict[k][0],
                                                                    content_dict[k][1],
                                                                    f' null', f' null',
                                                                    f' null', f' null',
                                                                    f' null', f' null',
                                                                    f' null', f' null']
            else:
                # data for newest test case and delta values
                new_dict[content_dict[k][0], content_dict[k][1]] = [content_dict[k][0],
                                                                    content_dict[k][1],
                                                                    f' {mem_dict_avg[k][2]} %',
                                                                    f' {mem_dict_max[k][2]} %',
                                                                    f' {cpu_dict_avg[k][2]} %',
                                                                    f' {cpu_dict_max[k][2]} %',
                                                                    f' {mem_dict_avg[k][1]} %',
                                                                    f' {mem_dict_max[k][1]} %',
                                                                    f' {cpu_dict_avg[k][1]} %',
                                                                    f' {cpu_dict_max[k][1]} %']
        except KeyError:
            pass
    df = pd.DataFrame.from_dict(new_dict)  # create dataframe based on the dictionary
    df.index = col_label  # add labels for columns
    df = df.transpose()  # flip row and column for more organized display
    return df


# set up and write the file/table using dictionary generated by generate_dict()
def update_data(content_dict, mem_dict_avg, mem_dict_max, cpu_dict_avg, cpu_dict_max, time, filename):
    new_dict = create_df(content_dict, mem_dict_avg, mem_dict_max, cpu_dict_avg, cpu_dict_max, time)
    original_df = pd.read_csv(filename)
    try:
        original_df = original_df.drop(["Delta(AvgMemory)", "Delta(MaxMemory)",
                                        "Delta(AvgCPU)", "Delta(MaxCPU)"], axis=1)
    except KeyError:
        pass

    updated_df = pd.merge(new_dict, original_df.loc[:, original_df.columns != 'NameSpace'], on="Pod", how="inner")
    updated_df.to_csv(filename, index=False)

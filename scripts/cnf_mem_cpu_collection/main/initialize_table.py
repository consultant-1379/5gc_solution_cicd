"""
    initialize_table.py
    Goal:
        initialize table with the result of the first test case
"""


import pandas as pd
import os


# set up and write the file/table using dictionary generated by generate_dict()
def generate_table(content_dict, time, filename, ns, node, _dir):
    col_label = ["NameSpace", "Pod",
                 f"MemoryAvg({time[0]}-{time[1]}|{time[2]}s)",
                 f"MemoryMax({time[0]}-{time[1]}|{time[2]}s)",
                 f"CPUAvg({time[0]}-{time[1]}|{time[2]}s)",
                 f"CPUMax({time[0]}-{time[1]}|{time[2]}s)"]
    for k in content_dict:
        content = content_dict[k]
        # handle null results
        if len(content) < 3:
            content_dict[k] = [content_dict[k][0], content_dict[k][1], f' null', f' null', f' null', f' null']
    df = pd.DataFrame.from_dict(content_dict)  # create dataframe based on the dictionary
    df.index = col_label  # add labels for columns
    df = df.transpose()  # flip row and column for more organized display
    # exclude first two lines (heading during data collection, not to display to user)
    # exclude the third line to remove redundancy caused by multi-key dictionary
    df = df.iloc[3:, :]

    df.to_csv(filename, index=False)

    try:
        df.to_csv(filename, index=False)
    except FileNotFoundError:
        # if necessary, modify below file path to local/absolute file path
        print("Filepath doesn't exist")
        create_dir = input("Enter \"y\" to create a directory with the given filepath, "
                           "enter anything else to store result file in current folder ")
        if create_dir == "y":
            os.mkdir(_dir)
            df.to_csv(filename, index=False)
        else:
            df.to_csv(f"{ns}_mem_cpu_{node}.csv", index=False)

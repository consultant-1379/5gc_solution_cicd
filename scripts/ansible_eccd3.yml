---
- name: CCD post install
  hosts: director
  remote_user: eccd
  become_user: root
  become: yes
  tasks:
    - name: Enable Password Login and Update password
      replace:
         path: /etc/ssh/sshd_config
         regexp: '#PasswordAuthentication yes'
         replace: 'PasswordAuthentication yes'
    - name: Restart ssh service
      shell: |
        systemctl restart sshd
        echo "eccd:eccd" |chpasswd

- name: CA Config
  hosts: worker director
  remote_user: eccd
  become_user: root
  become: yes
  tasks:
    - name: Copy RootCA to directors and workers
      copy: src=/home/eccd/5gc_solution_cicd/nfvi/n84/certs/root/RootCA.crt dest=/etc/pki/trust/anchors/
    - name: Update ca certificates
      shell: |
        update-ca-certificates

- name: EVNFM docker registry certificate
  hosts: worker
  remote_user: eccd
  become_user: root
  become: yes
  tasks:
    - name: Check cluster name
      shell: hostname | cut -d'-' -f5
      register: cluster_name
    - name: Create the evnfm cert directory
      file: path=/etc/docker/certs.d/evnfm-docker-registry.ingress.n84-eccd3.sero.gic.ericsson.se state=directory
    - name: Copy the evnfm cert to all worker nodes
      copy: src=/home/eccd/5gc_solution_cicd/nfvi/n84/certs/root/RootCA.crt dest=/etc/docker/certs.d/evnfm-docker-registry.ingress.n84-eccd3.sero.gic.ericsson.se

- name: kube config
  hosts: director[0]
  remote_user: eccd
  tasks:
    - name: Add the static route
      shell: |
        master_internal_vip=$(cat /etc/hosts | grep nodelocal-api.eccd.local | cut -d' ' -f1) && echo ${master_internal_vip}
        ingress_svc_ip=$(kubectl -n ingress-nginx get svc ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}') && echo ${ingress_svc_ip}
        sudo ip route add ${ingress_svc_ip} via ${master_internal_vip}
        sudo bash -c "echo ${ingress_svc_ip} ${master_internal_vip} - - >> /etc/sysconfig/network/ifroute-eth0"
    - name: Reinstall SR-IOV plugin
      shell: |
        cd /home/eccd/5gc_solution_cicd/nfvi/n84/test_channel_2/eccd/eccd3/2.18
        sriov_plugin_version=$(curl -s https://registry.eccd.local:5000/v2/sriov-network-device-plugin/tags/list | jq -r .tags[0])
        ([ ! -z $sriov_plugin_version ] && [ $sriov_plugin_version != null ] &&
        helm -n kube-system install sriov-dp /var/lib/eccd/container-images.d/erikube/ansible/erikube/helm-charts/sriov-network-device-plugin-0.3.2.tgz -f sriov-dp-values.yaml --set image.tag=$sriov_plugin_version) ||
        echo "Error: failed to Helm install SR-IOV plugin."
        kubectl get pod  -n kube-system -l app=sriovdp
    - name: Create Additional Ingress Host
      shell: |
        cd /home/eccd/5gc_sa_pkg/lab/yaml/
        export ns=monitoring
        export svc=eric-pm-server
        export port=9090
        export cluster=$(hostname | sed 's/director-[01]-//')
        export host=${ns}-${svc}.ingress.${cluster}.sero.gic.ericsson.se
        envsubst < ingress.yaml | kubectl create -f -
        export ns=monitoring
        export svc=eric-pm-server-external
        export port=9090
        export cluster=$(hostname | sed 's/director-[01]-//')
        export host=${ns}-${svc}.ingress.${cluster}.sero.gic.ericsson.se
        envsubst < ingress.yaml | kubectl create -f -
        export ns=monitoring
        export svc=eric-pm-server-pushgateway
        export port=9091
        export cluster=$(hostname | sed 's/director-[01]-//')
        export host=${ns}-${svc}.ingress.${cluster}.sero.gic.ericsson.se
        envsubst < ingress.yaml | kubectl create -f -
    - name: Patch CCD system daemonset
      shell: |    
        cat <<EOF | kubectl apply -n kube-system -f -
        apiVersion: "k8s.cni.cncf.io/v1"
        kind: NetworkAttachmentDefinition
        metadata:
          name: sriov-left-dpdk-intel
          annotations:
            k8s.v1.cni.cncf.io/resourceName: intel.com/intel_sriov_dpdk_left
        spec:
          config: '{
                     "cniVersion": "0.3.1",
                     "type": "noop",
                     "debugFile": "/var/lib/kubelet/noop.conf"
            }'
        EOF
        
        cat <<EOF | kubectl apply -n kube-system -f -
        apiVersion: "k8s.cni.cncf.io/v1"
        kind: NetworkAttachmentDefinition
        metadata:
          name: sriov-right-dpdk-intel
          annotations:
            k8s.v1.cni.cncf.io/resourceName: intel.com/intel_sriov_dpdk_right
        spec:
          config: '{
                     "cniVersion": "0.3.1",
                     "type": "noop",
                     "debugFile": "/var/lib/kubelet/noop.conf"
            }'
        EOF

        kubectl -n kube-system patch daemonsets kube-multus-ds-amd64 --type='json' -p='
        [
          {
            "op": "add",
            "path": "/spec/template/spec/tolerations/0",
            "value": {
              "effect": "NoSchedule",
              "key": "high-throughput",
              "operator": "Equal",
              "value": "true"
            }
          }
        ]
        '
         
        kubectl -n monitoring patch daemonsets eric-pm-server-node-exporter --type='json' -p='
        [
          {
            "op": "add",
            "path": "/spec/template/spec/tolerations/0",
            "value": {
              "effect": "NoSchedule",
              "key": "high-throughput",
              "operator": "Equal",
              "value": "true"
            }
          }
        ]
        '
         
        kubectl -n monitoring patch daemonsets node-cert-exporter --type='json' -p='
        [
          {
            "op": "add",
            "path": "/spec/template/spec/tolerations/0",
            "value": {
              "effect": "NoSchedule",
              "key": "high-throughput",
              "operator": "Equal",
              "value": "true"
            }
          }
        ]
        '
        
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[0].metadata.name) pcc-mm-pod=controller
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[1,2,3,4].metadata.name) pcc-mm-pod=non-controller
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[3,4].metadata.name) pcc-sm-pod=controller
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[0,1].metadata.name) pcc-sm-pod=non-controller
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[0].metadata.name) adp-snmp-ap-deploy=common
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[1].metadata.name) snmp-sender=eric-ccsm
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[2].metadata.name) snmp-sender=eric-ccdm
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[3].metadata.name) snmp-sender=eric-ccrc
        kubectl label node $(kubectl get nodes -l type=standard -o json | jq -r .items[4].metadata.name) snmp-sender=eric-sc

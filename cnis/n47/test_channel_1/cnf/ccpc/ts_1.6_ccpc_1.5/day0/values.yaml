global:
  profiles:
    std-system:
      enabled: true
    small-system:
      enabled: false
    cleartext:
      enabled: false
    mtls:
      enabled: true

  autoScaling:
    enabled: true
  ericsson:
    licensing:
      licenseDomains:
        - productType: 'CCPC'
          customerId: '946060'
          swltId: 'STA-CCPC-7'
  security:
    tls:
      enabled: true
  internalMtls:
    enabled: "on"
  pullSecret: regcred
  registry:
    url: registry01.eoaas.n47.vpod1.sc.sero.gic.ericsson.se
    imagePullPolicy: IfNotPresent
  timezone: UTC
  istio:
    ingress:
      gateways:
        eric-pcf-traffic-gw:
          enabled: true
        eric-ccpc-provisioning-gw:
          enabled: true
      oauth2:
        eric-pcf-traffic:
          enabled: false
          permissive: true
          selector: "eric-pcf-traffic"
          keys:
          - issuer: "nrf-a-id"
            jwks: '{"keys":[
                {
                  "crv":"P-256",
                  "kid":"key-c-id",
                  "kty":"EC",
                  "x":"wO3-TFT5fd-Xqx5f9eGLlJHmR9ZgEvRfEoBLXro97co",
                  "y":"rETYnJ2jUfav7lFr8I0pQnnF_1nDXfnOWG3vv-gvKEc"
                }
              ]}'
          rules:
          - paths: ["/npcf-smpolicycontrol/v1*"]
            methods: ["POST","PUT","PATCH","DELETE"]
            audiences: ["pcf-a-id"]
            subjects: ["smf-a-id"]
            issuers: ["nrf-a-id"]
            scopes: ["npcf-smpolicycontrol"]
    egress:
      endpoints:
        eric-ccrc-sbi-traffic-mtls:
          enabled: true
          host: "nrf1.n47.5gc.mnc081.mcc240.3gppnetwork.org" #FQDN for CCRC
          ports:
            - port: 443 # HTTPS target destination
              name: https-port-for-mTLS-origination
              mode: mTLS # Values allowed [ TLS, mTLS ]
        eric-smf-sbi-traffic-mtls:
          enabled: true
          host: "smf1.n47.5gc.mnc081.mcc240.3gppnetwork.org"
          ports:
            - port: 443 # HTTPS target destination
              name: https-port-for-mTLS-origination
              mode: mTLS # Values allowed [ TLS, mTLS ]

  enableCrashDumps: true # enable core dump generation
  tapagent:
    enabled: true

externalcertificate:
  ingress:
    trustedCertificateListName: eric-ccpc-sbi-server-certs-cacerts
    asymmetricKeyCertificateName: eric-ccpc-sbi-server-key/eric-ccpc-sbi-server-certificate
  egress:
    trustedCertificateListName: eric-ccpc-sbi-client-certs-cacerts
    asymmetricKeyCertificateName: eric-ccpc-sbi-client-key/eric-ccpc-sbi-client-certificate

eric-udm-mesh-integration:
  eric-mesh-controller:
    replicaCount: 2
  enabled: true
  eric-ingressgw-pcf-traffic:
    replicaCount: 2
    enabled: true
    externalTrafficPolicy: Cluster
    concurrency: 2
    service:
      loadBalancerIP: "" #Used for setting the ingress-gateway VIP
      annotations:
        metallb.universe.tf/address-pool: pcf-signaling
  eric-ingressgw-ccpc-provisioning:
    replicaCount: 2
    enabled: true
    externalTrafficPolicy: Cluster
    concurrency: 2
    service:
      loadBalancerIP: "" #Used for setting the ingress-gateway VIP
      annotations:
        metallb.universe.tf/address-pool: ccpc-prov

servicemesh:
  namespace: eric-ccpc

eric-nrfagent:
  global:
    ipStackMode: "'ipv4'"
    istio:
      nrfagent_egressrule_enabled: false
      egress:
        nrfAgent_secretName: "eric-ccpc-sbi-client-certs"
        caSecretNameSuffix: "-cacert"
        certsPath: "/etc/istio/egress-certs/"
        caCertsPath: "/etc/istio/egress-ca-certs/"
        clientCertificate: "tls.crt"
        privateKey: "tls.key"
        caCertificates: "cacert"
    scheduler:
      nodeSelector: {}

#adp: define sevice types and required IPs according to cluster specifics
eric-adp-5g-udm:
  eric-stm-diameter:
    replicaCount: 2
  eric-lm-combined-server:
    licenseServerClient:
      licenseServer:
        thrift:
          host: '10.221.14.88'
          port: '9095'
    licenseConsumerHandler:
      service:
        endpoints:
          externalHttps:
            tls:
              verifyClientCertificate: optional

  eric-pm-server:
    server:
      serviceAccountName: eric-adp-5g-udm-pm-server
      persistentVolume:
        storageClass: "network-block"  # "network-block-2" to avoid nexenta limit
        size: 15Gi
        retention: "1h"

  eric-pm-bulk-reporter:
    nodeSelector: {}
    userConfig:
      ldap:
        enabled: true
    env:
      nodeName: ccpc
      nodeType: CCPC
    persistentVolumeClaim:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
    service:
      annotations:
        sharedVIPLabel: ccpc-oam
        addressPoolName: ccpc-oam
      loadBalancerIP: ""
      type: LoadBalancer

  eric-cm-yang-provider:
    nodeSelector: {}
    persistentVolumeClaim:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
    service:
      annotations:
        addressPoolName: ccpc-oam
        sharedVIPLabel: ccpc-oam
      type: LoadBalancer
      loadBalancerIP: ""
    ldap:
      enabled: true
      ipv6Enabled: false
    authorization:
      enabled: true
    keyManagement:
      storeHostKeys: false
    externaldb:
      dbuser: customname
    pmMetrics:
      enabled: true
      enableQueryMetricsCommands: true
      httpsHost: eric-pm-server:9089

  eric-cm-mediator:
    nodeSelector: {}
    cmkey:
      enable: true
    backend:
      dbuser: customname

  eric-data-document-database-pg:
    nodeSelector:
      postgres: {}
      brAgent: {}
      cleanuphook: {}
    persistentVolumeClaim:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
      backup:
        storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit

  eric-data-document-database-pg-ah:
    enabled: true
    nodeSelector:
      postgres: {}
      brAgent: {}
      cleanuphook: {}
    postgresDatabase: adp_gs_ah
    persistentVolumeClaim:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit

  eric-data-document-database-pg-lm:
    enabled: true
    nodeSelector:
      postgres: {}
      brAgent: {}
      cleanuphook: {}
    postgresDatabase: adp_gs_lm
    persistentVolumeClaim:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit

  eric-data-document-database-pg-iam:
    nodeSelector:
      postgres: {}
      brAgent: {}
      cleanuphook: {}
    postgresDatabase: adp_gs_iam
    persistentVolumeClaim:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit

  eric-sec-access-mgmt:
    http:
      hostValidation:
        allowedHosts: iam.pcf.n47-eccd1.sero.gic.ericsson.se
    nodeSelector: {}

  eric-sec-ldap-server:
    persistence:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
    nodeSelector:
      ldap: {}
      ldapAgent: {}
      ldapProxy: {}

  eric-sec-key-management:
    nodeSelector: {}

  eric-sec-sip-tls:
    nodeSelector: {}

  eric-log-transformer:
    egress:
      syslog:
        enabled: false
        tls:
          enabled: true
        certificates:
          asymmetricKeyCertificateName: log-syslog-client
          trustedCertificateListName: log-syslog-client
        remoteHosts: []
        inclusions: []
        exclusions: []

  eric-data-search-engine:
    autoSetRequiredWorkerNodeSysctl: false
    nodeSelector:
      data: {}
      ingest: {}
      master: {}
      bragent: {}
    persistence:
      data:
        persistentVolumeClaim:
          storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
      # For data-search-engine >= 6.0.0-29
      master:
        persistentVolumeClaim:
          storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
    service:
      network:
        protocol:
          IPv6: false #If ipv6 is used, it must be set to true

  eric-data-search-engine-curator:
    nodeSelector: {}

  eric-data-coordinator-zk:
    nodeSelector:
      brAgent: {}
      datacoordinatorzk: {}
    persistence:
      persistentVolumeClaim:
        storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit


  eric-data-distributed-coordinator-ed:
    persistence:
      persistentVolumeClaim:
        storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
      brAgent:
        backupVolume:
          storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit


  eric-data-message-bus-kf:
    nodeSelector: {}
    persistence:
      persistentVolumeClaim:
        storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit

  eric-cnom-document-database-mg:
    nodeSelector: {}
    persistence:
      storageClass: "network-block"  # "network-block-2" to avoid nexenta limit
    serviceAccountName: default

  eric-cnom-server:
    nodeSelector: {}
    fqdn: cnom.pcf.n47-eccd1.sero.gic.ericsson.se
    dashboards:
      configMap: eric-ccpc-cnom-dashboards

  eric-fh-alarm-handler:
    nodeSelector: {}
    backend:
      dbname: adp_gs_ah
      dbuser: customname

  eric-fh-snmp-alarm-provider:
    nodeSelector: {}
    oamVIP:
      enabled: false
      vip: ""
      nodeName: ""
      destIp : ""
    service:
      annotations:
        sharedVIPLabel: ccpc-oam
        addressPoolName: ccpc-oam
      type: LoadBalancer
      loadBalancerIP: ""

  eric-ctrl-bro:
   nodeSelector: {}
   persistence:
     persistentVolumeClaim:
       storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit

  eric-sw-inventory-manager:
    nodeSelector: {}

  eric-tm-ingress-controller-cr:
    service:
      annotations:
        sharedVIPLabel: ccpc-oam
        addressPoolName: ccpc-oam
      type: LoadBalancer
      loadBalancerIP: ""
    nodeSelector:
      envoy: {}
    resources:
      contour:
        limits:
          memory: "500Mi"

  eric-odca-diagnostic-data-collector:
    env:
      enableFileCollector: true
    objectStorage:
      enabled: true

  eric-data-object-storage-mn:
    affinity:
      podAntiAffinity: "hard"
    credentials:
      kubernetesSecretName: eric-data-object-storage-mn-creds
    persistentVolumeClaim:
      storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit

eric-stm-diameter:
  service:
    externalIPv4:
      enabled: true
      annotations:
        addressPoolNameDiameterOverTCP: "ccpc-4g-traffic"
    externalIPv6:
      enabled: false
      annotations:
        addressPoolNameDiameterOverTCP: "ccpc-4g-traffic"
  initialConfig:
    dsl:
      enableIPv6: false

eric-slt-dsl:
  replicaCount: 2
  initialConfig:
    dsl:
      enableIPv6: false

dms:
  persistence:
    backup:
      persistentVolumeClaim:
        enabled: true
        storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
    data:
      persistentVolumeClaim:
        enabled: true
        storageClassName: "network-block"  # "network-block-2" to avoid nexenta limit
  nodeSelector:
    locator:
    server:
    adminMgr:
  brAgent:
    backupTypeList:
      - "eric-ccpc-provisioned-data-backup"
      - "DEFAULT"

dms-operator:
  nodeSelector:
    operator: {}

eric-pcf-license-handler:
  licensehandler:
    nodeSelector: {}
    licenses:
      data:
        smpc_bp:
          enabled: true
        smpc_miot_bp:
          enabled: true
        smpc_data_vp:
          enabled: true
        smpc_miot_data_vp:
          enabled: true

eric-pcf-nrf-registration:
  nrfregistration:
    nodeSelector: {}

da:
  autoScaling:
    minReplicas: 6
    maxReplicas: 7
    nodeSelector: {}
  nameOverride: eric-ccpc-data-access
  dataaccess:

eric-pcf-session-management-policy-control:
  sessionmanagementpolicycontrol:
    minReplicas: 4
    maxReplicas: 6
    smpcConfiguration:
      properties:
        checkForSessionAlive: false
    nodeSelector: {}

eric-pcrf-ipcan-session-management:
  ipcansessionmanagement:
    minReplicas: 2
    maxReplicas: 2
    ipsmConfiguration:
      properties:
        checkForSessionAlive: false
    nodeSelector: {}

prov:
  provisioning:
    nodeSelector: {}

eric-pcf-peer-discoverer:
  peerdiscoverer:
    nodeSelector: {}
    config:
      data:
        connectivityConfiguration:
          alpnProtocols: h2,http/1.1
          timeout: 500
          outlier:
            consecutiveFailures: 3
          healthCheck:
            interval: 60000
            unhealthyThreshold: 3
            healthyThreshold: 1
            resource: /nudr-dr/v2/policy-data/ues/imsi-100000/sm-data
            acceptedCodes:
              - 200,600
        targetNFSpecification:
          maxRedundantNFs: 3

eric-pcf-peer-discoverer-chf:
  peerdiscoverer:
    nodeSelector: {}
    config:
      data:
        connectivityConfiguration:
          alpnProtocols: h2,http/1.1
          timeout: 500
          outlier:
            consecutiveFailures: 3
          healthCheck:
            interval: 60000
            unhealthyThreshold: 3
            healthyThreshold: 1
            resource: /nchf-spendinglimitcontrol/v1/subscriptions/imsi100000
            acceptedCodes:
              - 200,600
        targetNFSpecification:
          maxRedundantNFs: 3

eric-pcf-egress-proxy:
  egressproxy:
    minReplicas: 2
    maxReplicas: 2
   
    nodeSelector: {}
    secure:
      secret:
        cert:
          name: eric-ccpc-sbi-client-certs
        cacert:
          name: eric-ccpc-sbi-client-certs-cacert
    #UDM5GP-54477
    resources:
      requests:
        memory: 170Mi
      limits:
        memory: 200Mi
  envoymanager:
    resources:
      requests:
        memory: 72Mi
      limits:
        memory: 88Mi
eric-pcf-egress-proxy-chf:
  egressproxy:
    minReplicas: 2
    maxReplicas: 2
    nodeSelector: {}
    secure:
      secret:
        cert:
          name: eric-ccpc-sbi-client-certs
        cacert:
          name: eric-ccpc-sbi-client-certs-cacert
    #UDM5GP-54477
    resources:
      requests:
        memory: 170Mi
      limits:
        memory: 200Mi
  envoymanager:
    resources:
      requests:
        memory: 72Mi
      limits:
        memory: 88Mi

eric-pcf-charging:
  charging:
    minReplicas: 2
    maxReplicas: 2




